Index: inc/ush.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#ifndef USH_H\n#define USH_H\n\n#include <unistd.h>\n#include <stdlib.h>\n#include <xlocale.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <term.h>\n#include <sys/types.h>\n#include <regex.h> \n#include <pwd.h>\n#include <stdio.h>\n#include <dirent.h>\n#include \"libmx.h\"\n#include <time.h>\n#include <termios.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <termcap.h>\n#include <wchar.h>\n#include <sys/cdefs.h>\n#include <sys/_types.h>\n#include <sys/_types/_pid_t.h>\n#include <sys/_types/_id_t.h>\n#include <sys/signal.h>\n#include <sys/resource.h>\n\n\n#define MX_W_INT(w)         (*(int *)&(w))\n#define MX_WST(x)           (x & 0177)\n#define MX_WIFEXIT(x)       (MX_WST(x) == 0)\n#define MX_WIFSIG(x)        (MX_WST(x) != _WSTOPPED && MX_WST(x) != 0)\n#define MX_WTERMSIG(x)      (MX_WST(x))\n#define MX_EXSTATUS(x)      ((MX_W_INT(x) >> 8) & 0x000000ff)\n\n\n#define MX_STR info->input->comands[info->input->id]\n#define MX_COMMAND info->input->comands\n#define MX_ID info->input->id\n#define MX_STR_LEN info->input->str_len\n#define MX_STR_POS info->input->end_posit\n#define MX_MAX_COMAND info->input->max_comand\n#define MX_SYMBOL info->input->if_\n#define MX_ID_TAB_KEY info->input->pos_tab\n#define MX_FLAGS_W O_RDWR | O_CREAT | O_TRUNC, S_IWRITE | S_IREAD\n#define MX_FLAGS_WE O_RDWR | O_CREAT | O_APPEND, S_IWRITE | S_IREAD\n#define MAX_PROC_COUNT 500\n#define MX_USH \"u$h> \"\n#define MX_SEARCH \"Search > \"\n#define MX_PATH ((t_token*)tmp->next->next->data)->value[0]\n#define MX_FUNC_RETURN mx_return_value(\"HOME\", &(info->var_tree))\n#define MX_GET_PATH (argv[i] ? argv[i] : MX_FUNC_RETURN)\n#define MX_REG_EXPORT   \"^[A-Za-z_]+[A-Za-z_0-9]*(=.*)?$\"\n#define MX_REG_ERR      \"^^-(i+)?[^Pui]\"\n#define MX_REG_I        \"^-i+((P|u)?|((P|u).+)?)$\"\n#define MX_REG_U        \"^-(i+)?u.*$\"\n#define MX_REG_P        \"^-(i+)?P.*$\"\n#define MX_REG_VER      \"^.+=.*$\"\n#define MX_REG_PROG     \"^[^-]\"\n\n// VARIABLES\n\ntypedef struct s_var {\n    char *name;\n    char *value;\n    bool flag;\n    struct s_var *next;\n}              t_var;\n\ntypedef struct s_variable {\n    char *name;\n    char *value;\n    bool is_env;\n    char *mem;\n}              t_variable;\n\ntypedef struct s_tree_node {\n    struct s_tree_node *left;\n    struct s_tree_node *right;\n    struct s_tree_node *parent;\n    void *data;\n} t_tnode;\n\nenum e_branch {\n    RIGHT,\n    LEFT\n};\n\nenum e_operator_status {\n    OP_NOTHING,\n    OP_PIPE_R,\n    OP_PIPE_W,\n    OP_PIPE_RW,\n    OP_MORE = 4,\n    OP_DMORE = 8,\n    OP_LESS = 16,\n    LEFT_VISITED = 128,\n    RIGHT_VISITED = 64,\n    OP_AMP = 32\n};\n\n// AST\nenum e_type_of_token{\n    TYPE_OPERATOR,\n    TYPE_COMMAND,\n\n    TYPE_FILENAME,\n    TYPE_DESC_NUMB,\n};\n\ntypedef struct s_token{\n    char type;\n    char **value;\n    int priority;\n}              t_token;\n\ntypedef struct s_process {\n    char **name;\n    pid_t pid;\n    int index;\n}              t_process;\n\ntypedef struct s_input {\n    char **comands;\n    char **comand_tab;\n    int id;\n    int max_comand;\n    int str_len;\n    int end_posit;\n    int if_;\n    int pos_tab;\n}              t_input;\n\ntypedef struct s_programInfo {\n    struct termios term_old;\n    struct termios term_new;\n    char **env;\n    t_list *history;\n    t_input *input;\n    t_list *processes;\n    bool is_exit;\n    bool if_ctrl_c;\n    int exit_status;\n    char *pwd;\n    char *pwd_l;\n    char *pwd_p;\n    char *old_pwd;\n    char *path;\n    char *home;\n    t_list *var_tree;\n    int last_status;\n}              t_info;\n\nenum e_keys{\n    CTRL_A = 1,\n    CTRL_W = 23,\n    CTRL_E = 5,\n    CTRL_R = 18,\n    CTRL_T = 20,\n    CTRL_Y = 25,\n    CTRL_U = 21,\n    CTRL_I = 9, // TAB\n    CTRL_P = 16,\n    CTRL_CLOSE_BRACKET = 29,\n    CTRL_D = 4,\n    CTRL_F = 6,\n    CTRL_G = 7, // sound\n    CTRL_H = 8,\n    CTRL_K = 11, // vertical tab\n    CTRL_L = 12, // new feed\n    CTRL_Z = 26,\n    CTRL_X = 24,\n    CTRL_C = 3,\n    CTRL_B = 2,\n    CTRL_N = 14,\n    KEY_ESCAPE = 27,\n    KEY_SPACE = 32,\n    KEY_ENTER = 13\n};\n\n\n// tree\nvoid mx_insert_tree(t_tnode **root, t_tnode *new,\n    int (*cmp)(void*, void*),\n    void (*free_)(void *)\n);\n\nt_tnode* mx_get_min_tnode(t_tnode *root);\nvoid mx_strarr_add_to_strarr(char ***strs, char ***str);\nt_tnode *mx_create_tnode(void *data);\nvoid mx_start_program(t_list **var_tree, char **env);\nvoid mx_delete_tnode(t_tnode **root, void *data, int (*cmp)(void*, void*), void (*free_tnode)(t_tnode *tnode));\nvoid mx_push_env(t_list **var_tree, char *name, char *value, char *mem);\nt_tnode *mx_find_tnode(t_tnode *root, void *data, int (*cmp)(void*, void*));\nvoid mx_if_new_parameter(char *str, int *start, int end, t_info *processes);\nchar *mx_return_value(char **str, t_list **var_tree);\nchar *mx_return_value2(const char *str, t_list **var_tree);\nvoid mx_serch_list(t_list **var_tree, char *name, char *value);\nt_token *mx_create_token(char type, char **value, int priority);\nvoid mx_clear_tokens(t_list **tokens);\nt_token* mx_get_next_token(int *start, int end, char *str, t_info *processes);\nchar mx_get_token_type(char *str);\nvoid mx_parametr_shell(t_info *processes, int *i, char **new_str);\nint mx_flang_comand(char *str, int *pos, int end, int flag);\nvoid mx_read_user(char **user);\nt_token *mx_token_in_program(int *curr_pos, int end, char *str, t_info *processes);\nint mx_exec_dmore(t_tnode *root, int *fds, int operatorStatus, t_info *info);\nvoid mx_ush_init(t_info **info, char **env);\nvoid mx_subs(char **str);\nvoid mx_parsing(char *str, t_info *info);\nt_list *mx_lexer(char *str, t_info *processes);\nbool mx_syntax_analyzer(t_list *tokens);\nvoid mx_execute(char **commands, t_info *processes);\nvoid mx_ush_close(t_info *info);\nvoid mx_charge_parametr_export(char *value, char *tmp, t_variable *data);\n\nvoid mx_write_from_to(int from , int to, off_t start);\n// typedef struct termios t_termios;\n\n//BUILT IN\nint mx_cd(char **argv, t_info *info);\nint mx_history(t_list **list_comands);\nvoid mx_printstr_env(char *str);\nint mx_pwd(char **argv, t_info *info);\nvoid mx_echo(char **str,  t_info *info);\nvoid mx_env(char **argv, t_info *info);\nvoid mx_export(char **argv, t_list **var_tree, t_info *info);\nvoid mx_unset(char **argv, t_list **var_tree, t_info *info);\nvoid mx_which(char **argv, t_info *info);\nbool mx_is_buildin(char *str);\nvoid mx_jobs(t_info *info);\nvoid mx_fg(char **argv, t_info *info);\nvoid mx_exit(t_token *token, t_info *info);\n\n//CD \nint mx_chdir_p(char *path, t_info *info, char flags);\nchar* mx_add_one_rank(char *path, char *new_part);\nchar* mx_del_last_rank(char *path);\nint mx_chdir_l(char *path, t_info *info, char flags);\n\n// Which\nbool mx_is_commad(char *fullname, int flags);\n\n//\nbool mx_check_symbol(char *str, int position, char symbol);\nvoid mx_ctrl_v_and_not_ascii(t_info *info, char *chars);\nvoid mx_ctrl_r(t_info *info);\nint mx_ascii(t_info *info, char *chars, unsigned int ch);\nint mx_end_flag(char *str, int *position, int end, int flag);\nchar *mx_parsing_input(char *str);\nchar *mx_audit_str(char *str, t_info *processes, bool dqute);\nchar *mx_str_bquote(char **str, t_info *processes);\nchar **mx_create_comands(char *str, int end);\nvoid mx_one_symbol(char **str, char ch, int *count, int position);\nvoid mx_not_ascii(char *chars, t_info *info);\nint mx_bit_sumbol(char *str);\nint mx_len_symbol(int sum, char *str);\nint mx_input(t_info *info);\nvoid mx_print_esc(char *s);\nvoid mx_check_outprogram_new_line(void);\nvoid mx_clean_space_in_term(char *str, t_info *info, char *new_str);\nvoid mx_print_esc(char *s);\nvoid mx_terminal_out(char *name, int table2, int pos,char *str);\nvoid mx_clean_terminal(char *name, int table2, int pos,char *str);\nvoid mx_print_esc(char *s);\nvoid mx_key_delite(t_info *info);\nchar **mx_key_tab(char *parsing, char **str, t_info *info);\nchar *mx_mini_parser_tab(char *parsing, t_info *info);\nvoid mx_read_comand(char *parsing, t_list **list_comand);\nvoid mx_key_duble_tab(char **str, char **comands, t_info *info);\nvoid mx_print_tab_comands(t_list *list_comand);\nt_info* mx_get_info(t_info *info);\nbool mx_is_link(char *file);\nvoid mx_unset_fds(int *fds, int *savedFds, int operator_starus);\nt_var *mx_var_tree_to_var(t_list *var_tree);\nint mx_get_twidth();\n\n// lexer\nbool mx_is_char(char c);\nvoid mx_home(char **str, int *i, t_info *processes);\nvoid mx_do_replace(char **str, size_t start, size_t end, char *str_new);\nbool mx_is_operator(t_token *token);\nunsigned int mx_read_keyboard(t_info *info);\n\n// AST\nt_tnode* mx_create_ast(t_list** tokens, t_tnode *prev);\nvoid mx_delete_ast(t_tnode **root);\n\n//exec\nint mx_execute_tree(t_tnode *root, int *fds, char operator_status, t_info *info);\nint mx_exec_more(t_tnode *root, int *fds, int operator_status, t_info *info);\nint exec_token(t_token *token, int *fds, char operator_status, t_info *info);\nvoid mx_exec_less(t_tnode *root, int *fds, char operator_status, t_info *info);\nvoid mx_execute_proces(t_token* token);\nvoid mx_close_all_pr(t_info *info);\nint mx_pipe_execute(t_tnode *root, int *fds, char operator_status, t_info *processes);\nint mx_buildin_list(t_token *token, t_info *info);\nvoid mx_exec_env_pr(char *path, char **argv, char **env, t_info *info);\n\n// processes\nint mx_add_process(t_list **processes, pid_t pid, char **name);\nvoid mx_del_top_process(t_info *info);\nvoid mx_del_pid_process(t_info *info, int pid);\nvoid mx_wait_process(t_info *info, char **argv);\nvoid mx_segfault();\nvoid mx_ctrl_c();\nvoid mx_ctrl_z();\nvoid mx_segfault_in();\n\n//print\nvoid mx_print_susp(char **mas_name);\nvoid mx_print_cont(char **mas_name, int pid);\nchar **mx_get_name(t_info *info, int numb);\n\n// env \n\nchar **mx_call_vlad(char **argv, int i);\nchar **mx_env_to_vlad(t_var *var);\nbool mx_check_env(char **argv, char **path, t_var *var, int *i);\nbool mx_printerr_env(char *str, int flag);\nvoid mx_print_env(t_var *var);\nvoid mx_fre_env_path(t_var *var, char *path);\nbool mx_reg(char *str, char *regular);\nchar *mx_get_path_env(char *str1, char *str2, int *i);\nint mx_delete_veriable_env(char *str1, char *str2, t_var *var, int *i);\n\n// echo\nint mx_0_and_x(char *str, int *i);\n\n//utils\nchar *mx_strjoin2(char *s1, char *s2);\nchar **mx_dupstrarr(char **strs);\nint mx_strcmp2(const char *s1, const char *s2);\nchar *mx_strjoin3(char *s1, char *s2);\nchar *mx_arrstr_to_str(char **strs);\nunsigned int mx_getchar();\nbool mx_is_str_starts(char *string, char *start);\nvoid mx_add_to_strarr(char ***strs, char *str);\nvoid mx_pop_front_free_data(t_list **head);\nvoid mx_pop_list(t_list **head, void *data, bool(*if_list)(void *, void *),\n                 void(*del_data)(void *));\n\n\n#endif\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inc/ush.h	(revision 4bba6505eac09d893b08fbd98a63ad45d587a3fc)
+++ inc/ush.h	(date 1592819641000)
@@ -48,7 +48,7 @@
 #define MX_FLAGS_W O_RDWR | O_CREAT | O_TRUNC, S_IWRITE | S_IREAD
 #define MX_FLAGS_WE O_RDWR | O_CREAT | O_APPEND, S_IWRITE | S_IREAD
 #define MAX_PROC_COUNT 500
-#define MX_USH "u$h> "
+#define MX_USH " u$h> "
 #define MX_SEARCH "Search > "
 #define MX_PATH ((t_token*)tmp->next->next->data)->value[0]
 #define MX_FUNC_RETURN mx_return_value("HOME", &(info->var_tree))
Index: src/utils/mx_term_out.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"ush.h\"\n\nvoid mx_check_outprogram_new_line(void) {\n    int twidth = mx_get_twidth() - 1;\n    int save_fd1 = dup(1);\n    int term_fd1 = open(\"/dev/tty\", O_WRONLY);\n\n    dup2(term_fd1, 1);\n    write(1,\"%\",1);\n    for (int i = 0; i < twidth; i++)\n        write(1,\" \",1);\n    write(1,\"\\r\",1);\n    mx_print_esc(\"J\");\n    dup2(save_fd1, 1);\n    close(save_fd1);\n    close(term_fd1);\n}\n\nstatic void print_two_str(char *str1, char *str2) {\n    mx_printstr(str1);\n    mx_printstr(str2);\n}\n\nvoid mx_terminal_out(char *name, int table2, int pos, char *str) {\n    int symbol = mx_bit_sumbol(&str[table2 - pos - 1]);\n    int len = (int) name[0];\n    int col = mx_get_twidth();\n\n    print_two_str(&name[1], str);\n    mx_printstr(\" \");\n    for (int i = (mx_len_symbol(table2, str) + len) / col; i > 0; i--)\n        mx_print_esc(\"1F\");\n    write(1,\"\\r\",1);\n    mx_printstr(&name[1]);\n    write(1, str, table2 - pos - 1);\n    if ((mx_len_symbol(table2 - pos, str) + len) % col == 0) {\n        if (pos == 0)\n            write(1, \" \", 1);\n        else\n            write(1, &str[table2 - pos - 1], symbol);\n        write(1, \"\\b\", 1);\n    }\n    mx_printstr(\"\\x1b[0m\");\n}\n\nvoid mx_clean_terminal(char *name, int table2, int pos, char *str) {\n\n    int temp;\n    int len = (int)name[0];\n\n    temp = (mx_len_symbol(table2 - pos, str) + len) / mx_get_twidth();\n    for (int i = temp; i > 0; i--) {\n        mx_print_esc(\"1F\");\n    }\n    write(1,\"\\r\",1);\n    mx_print_esc(\"J\");\n}\n\nvoid mx_clean_space_in_term(char *str, t_info *info, char *new_str) {\n    int temp;\n    int col = mx_get_twidth();\n\n    temp = (mx_len_symbol(MX_STR_LEN - MX_STR_POS, str) + 4) / col;\n    for (int i = temp; i > 0; i--) {\n        mx_print_esc(\"1F\");\n    }\n    write(1,\"\\r\",1);\n    mx_print_esc(\"J\");\n    mx_printstr(MX_USH);\n    mx_printstr(new_str);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/utils/mx_term_out.c	(revision 4bba6505eac09d893b08fbd98a63ad45d587a3fc)
+++ src/utils/mx_term_out.c	(date 1592819667000)
@@ -9,7 +9,7 @@
     write(1,"%",1);
     for (int i = 0; i < twidth; i++)
         write(1," ",1);
-    write(1,"\r",1);
+    mx_printstr("\r");
     mx_print_esc("J");
     dup2(save_fd1, 1);
     close(save_fd1);
@@ -30,15 +30,15 @@
     mx_printstr(" ");
     for (int i = (mx_len_symbol(table2, str) + len) / col; i > 0; i--)
         mx_print_esc("1F");
-    write(1,"\r",1);
+    mx_printstr("\r");
     mx_printstr(&name[1]);
     write(1, str, table2 - pos - 1);
     if ((mx_len_symbol(table2 - pos, str) + len) % col == 0) {
         if (pos == 0)
-            write(1, " ", 1);
+            mx_printstr(" ");
         else
             write(1, &str[table2 - pos - 1], symbol);
-        write(1, "\b", 1);
+        mx_printstr("\b");
     }
     mx_printstr("\x1b[0m");
 }
